//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Loader.EntityDataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChaInvBillingEntities : DbContext
    {
        public ChaInvBillingEntities()
            : base("name=ChaInvBillingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("ChaInvBillingEntities", "fgetBranchDetails")]
        public virtual IQueryable<fgetBranchDetails_Result> fgetBranchDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fgetBranchDetails_Result>("[ChaInvBillingEntities].[fgetBranchDetails]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetBrand")]
        public virtual IQueryable<FgetBrand_Result> FgetBrand()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetBrand_Result>("[ChaInvBillingEntities].[FgetBrand]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FGetcatagoryTB")]
        public virtual IQueryable<FGetcatagoryTB_Result> FGetcatagoryTB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FGetcatagoryTB_Result>("[ChaInvBillingEntities].[FGetcatagoryTB]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "fgetCategoryMaster")]
        public virtual IQueryable<fgetCategoryMaster_Result> fgetCategoryMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fgetCategoryMaster_Result>("[ChaInvBillingEntities].[fgetCategoryMaster]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetCustomerTB")]
        public virtual IQueryable<FgetCustomerTB_Result> FgetCustomerTB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetCustomerTB_Result>("[ChaInvBillingEntities].[FgetCustomerTB]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetEmployeeInfoTB")]
        public virtual IQueryable<FgetEmployeeInfoTB_Result> FgetEmployeeInfoTB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetEmployeeInfoTB_Result>("[ChaInvBillingEntities].[FgetEmployeeInfoTB]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetEmployeeSupervisorlist")]
        public virtual IQueryable<FgetEmployeeSupervisorlist_Result> FgetEmployeeSupervisorlist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetEmployeeSupervisorlist_Result>("[ChaInvBillingEntities].[FgetEmployeeSupervisorlist]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetItemMasterList")]
        public virtual IQueryable<FgetItemMasterList_Result> FgetItemMasterList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetItemMasterList_Result>("[ChaInvBillingEntities].[FgetItemMasterList]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "fgetLevelAuthorityType")]
        public virtual IQueryable<fgetLevelAuthorityType_Result> fgetLevelAuthorityType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fgetLevelAuthorityType_Result>("[ChaInvBillingEntities].[fgetLevelAuthorityType]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetMaifacture")]
        public virtual IQueryable<FgetMaifacture_Result> FgetMaifacture()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetMaifacture_Result>("[ChaInvBillingEntities].[FgetMaifacture]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "fgetMasterModel")]
        public virtual IQueryable<fgetMasterModel_Result> fgetMasterModel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fgetMasterModel_Result>("[ChaInvBillingEntities].[fgetMasterModel]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetMasterSize")]
        public virtual IQueryable<FgetMasterSize_Result> FgetMasterSize()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetMasterSize_Result>("[ChaInvBillingEntities].[FgetMasterSize]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FGetNMonthCal")]
        public virtual IQueryable<FGetNMonthCal_Result> FGetNMonthCal(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FGetNMonthCal_Result>("[ChaInvBillingEntities].[FGetNMonthCal](@Year)", yearParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetReqDisplayLevelwise")]
        public virtual IQueryable<FgetReqDisplayLevelwise_Result> FgetReqDisplayLevelwise(Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetReqDisplayLevelwise_Result>("[ChaInvBillingEntities].[FgetReqDisplayLevelwise](@EmployeeId, @LevelId, @TypeId)", employeeIdParameter, levelIdParameter, typeIdParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetStaffAuthorization")]
        public virtual IQueryable<FgetStaffAuthorization_Result> FgetStaffAuthorization()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetStaffAuthorization_Result>("[ChaInvBillingEntities].[FgetStaffAuthorization]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetSupplier")]
        public virtual IQueryable<FgetSupplier_Result> FgetSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetSupplier_Result>("[ChaInvBillingEntities].[FgetSupplier]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetTaxMaster")]
        public virtual IQueryable<FgetTaxMaster_Result> FgetTaxMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetTaxMaster_Result>("[ChaInvBillingEntities].[FgetTaxMaster]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetUnitOfMeasure")]
        public virtual IQueryable<FgetUnitOfMeasure_Result> FgetUnitOfMeasure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetUnitOfMeasure_Result>("[ChaInvBillingEntities].[FgetUnitOfMeasure]()");
        }
    
        public virtual int PcreateBrand(Nullable<int> bid, string brandName, string brandCode, Nullable<int> status, Nullable<int> postedby)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("Bid", bid) :
                new ObjectParameter("Bid", typeof(int));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var postedbyParameter = postedby.HasValue ?
                new ObjectParameter("Postedby", postedby) :
                new ObjectParameter("Postedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PcreateBrand", bidParameter, brandNameParameter, brandCodeParameter, statusParameter, postedbyParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> PCreateCategoryMaster(Nullable<int> categoryID, string categoryName, Nullable<int> status, Nullable<int> pAId, Nullable<byte> level, string categoryCode)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var pAIdParameter = pAId.HasValue ?
                new ObjectParameter("PAId", pAId) :
                new ObjectParameter("PAId", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(byte));
    
            var categoryCodeParameter = categoryCode != null ?
                new ObjectParameter("CategoryCode", categoryCode) :
                new ObjectParameter("CategoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("PCreateCategoryMaster", categoryIDParameter, categoryNameParameter, statusParameter, pAIdParameter, levelParameter, categoryCodeParameter);
        }
    
        public virtual int PcreateManifactureMaster(Nullable<int> mid, string manifactureName, string manifactureCode, Nullable<int> status, Nullable<int> postedBy)
        {
            var midParameter = mid.HasValue ?
                new ObjectParameter("Mid", mid) :
                new ObjectParameter("Mid", typeof(int));
    
            var manifactureNameParameter = manifactureName != null ?
                new ObjectParameter("ManifactureName", manifactureName) :
                new ObjectParameter("ManifactureName", typeof(string));
    
            var manifactureCodeParameter = manifactureCode != null ?
                new ObjectParameter("ManifactureCode", manifactureCode) :
                new ObjectParameter("ManifactureCode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var postedByParameter = postedBy.HasValue ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PcreateManifactureMaster", midParameter, manifactureNameParameter, manifactureCodeParameter, statusParameter, postedByParameter);
        }
    
        public virtual int PcreateMasterModel(Nullable<int> mid, string modelName, string modelCode, Nullable<int> status, Nullable<int> postedBy)
        {
            var midParameter = mid.HasValue ?
                new ObjectParameter("Mid", mid) :
                new ObjectParameter("Mid", typeof(int));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var modelCodeParameter = modelCode != null ?
                new ObjectParameter("ModelCode", modelCode) :
                new ObjectParameter("ModelCode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var postedByParameter = postedBy.HasValue ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PcreateMasterModel", midParameter, modelNameParameter, modelCodeParameter, statusParameter, postedByParameter);
        }
    
        public virtual int PCreateMasterSize(Nullable<int> sid, string sizeName, string sizeCode, Nullable<int> status, Nullable<int> postedBy)
        {
            var sidParameter = sid.HasValue ?
                new ObjectParameter("Sid", sid) :
                new ObjectParameter("Sid", typeof(int));
    
            var sizeNameParameter = sizeName != null ?
                new ObjectParameter("SizeName", sizeName) :
                new ObjectParameter("SizeName", typeof(string));
    
            var sizeCodeParameter = sizeCode != null ?
                new ObjectParameter("SizeCode", sizeCode) :
                new ObjectParameter("SizeCode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var postedByParameter = postedBy.HasValue ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PCreateMasterSize", sidParameter, sizeNameParameter, sizeCodeParameter, statusParameter, postedByParameter);
        }
    
        public virtual int PcreateUnitOfMeasure(Nullable<int> uId, string unitName, string uSymbol, Nullable<int> status, Nullable<int> postedBy)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("UId", uId) :
                new ObjectParameter("UId", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var uSymbolParameter = uSymbol != null ?
                new ObjectParameter("USymbol", uSymbol) :
                new ObjectParameter("USymbol", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var postedByParameter = postedBy.HasValue ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PcreateUnitOfMeasure", uIdParameter, unitNameParameter, uSymbolParameter, statusParameter, postedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> PsetCustomer(Nullable<int> custID, Nullable<int> ctypeId, string customerName, string panno, Nullable<System.DateTime> registrationDate, string mobileNo, string telephoneNo, string email, string temporaryAddress, string permanentAddress, string country, string state, string city, string street, string postalcode, Nullable<int> status, Nullable<int> postedBy)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var ctypeIdParameter = ctypeId.HasValue ?
                new ObjectParameter("CtypeId", ctypeId) :
                new ObjectParameter("CtypeId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var pannoParameter = panno != null ?
                new ObjectParameter("Panno", panno) :
                new ObjectParameter("Panno", typeof(string));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var telephoneNoParameter = telephoneNo != null ?
                new ObjectParameter("TelephoneNo", telephoneNo) :
                new ObjectParameter("TelephoneNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var temporaryAddressParameter = temporaryAddress != null ?
                new ObjectParameter("TemporaryAddress", temporaryAddress) :
                new ObjectParameter("TemporaryAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var postalcodeParameter = postalcode != null ?
                new ObjectParameter("Postalcode", postalcode) :
                new ObjectParameter("Postalcode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var postedByParameter = postedBy.HasValue ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("PsetCustomer", custIDParameter, ctypeIdParameter, customerNameParameter, pannoParameter, registrationDateParameter, mobileNoParameter, telephoneNoParameter, emailParameter, temporaryAddressParameter, permanentAddressParameter, countryParameter, stateParameter, cityParameter, streetParameter, postalcodeParameter, statusParameter, postedByParameter);
        }
    
        public virtual int PSetItemMaster(Nullable<int> itemId, Nullable<int> itemTypeId, Nullable<int> catagoryId, string itemName, string itemCode, Nullable<int> unitOfMeasureId, Nullable<int> manifactureId, Nullable<int> brandId, Nullable<int> modelId, string universalProductCode, string manifacturePartNo, string internationalArticleNo, string iSBN, string barcode, Nullable<decimal> purchaseRate, Nullable<int> purchaseTaxId, Nullable<decimal> salesRate, Nullable<int> salesTaxid, Nullable<int> maxStocklvl, Nullable<int> minStocklvl, Nullable<int> dangerStocklvl, Nullable<int> eOQlevel, Nullable<int> reorderPoint, Nullable<int> status, Nullable<int> postedBy)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            var catagoryIdParameter = catagoryId.HasValue ?
                new ObjectParameter("CatagoryId", catagoryId) :
                new ObjectParameter("CatagoryId", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var unitOfMeasureIdParameter = unitOfMeasureId.HasValue ?
                new ObjectParameter("UnitOfMeasureId", unitOfMeasureId) :
                new ObjectParameter("UnitOfMeasureId", typeof(int));
    
            var manifactureIdParameter = manifactureId.HasValue ?
                new ObjectParameter("ManifactureId", manifactureId) :
                new ObjectParameter("ManifactureId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var universalProductCodeParameter = universalProductCode != null ?
                new ObjectParameter("UniversalProductCode", universalProductCode) :
                new ObjectParameter("UniversalProductCode", typeof(string));
    
            var manifacturePartNoParameter = manifacturePartNo != null ?
                new ObjectParameter("ManifacturePartNo", manifacturePartNo) :
                new ObjectParameter("ManifacturePartNo", typeof(string));
    
            var internationalArticleNoParameter = internationalArticleNo != null ?
                new ObjectParameter("InternationalArticleNo", internationalArticleNo) :
                new ObjectParameter("InternationalArticleNo", typeof(string));
    
            var iSBNParameter = iSBN != null ?
                new ObjectParameter("ISBN", iSBN) :
                new ObjectParameter("ISBN", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var purchaseRateParameter = purchaseRate.HasValue ?
                new ObjectParameter("PurchaseRate", purchaseRate) :
                new ObjectParameter("PurchaseRate", typeof(decimal));
    
            var purchaseTaxIdParameter = purchaseTaxId.HasValue ?
                new ObjectParameter("PurchaseTaxId", purchaseTaxId) :
                new ObjectParameter("PurchaseTaxId", typeof(int));
    
            var salesRateParameter = salesRate.HasValue ?
                new ObjectParameter("SalesRate", salesRate) :
                new ObjectParameter("SalesRate", typeof(decimal));
    
            var salesTaxidParameter = salesTaxid.HasValue ?
                new ObjectParameter("SalesTaxid", salesTaxid) :
                new ObjectParameter("SalesTaxid", typeof(int));
    
            var maxStocklvlParameter = maxStocklvl.HasValue ?
                new ObjectParameter("MaxStocklvl", maxStocklvl) :
                new ObjectParameter("MaxStocklvl", typeof(int));
    
            var minStocklvlParameter = minStocklvl.HasValue ?
                new ObjectParameter("MinStocklvl", minStocklvl) :
                new ObjectParameter("MinStocklvl", typeof(int));
    
            var dangerStocklvlParameter = dangerStocklvl.HasValue ?
                new ObjectParameter("DangerStocklvl", dangerStocklvl) :
                new ObjectParameter("DangerStocklvl", typeof(int));
    
            var eOQlevelParameter = eOQlevel.HasValue ?
                new ObjectParameter("EOQlevel", eOQlevel) :
                new ObjectParameter("EOQlevel", typeof(int));
    
            var reorderPointParameter = reorderPoint.HasValue ?
                new ObjectParameter("ReorderPoint", reorderPoint) :
                new ObjectParameter("ReorderPoint", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var postedByParameter = postedBy.HasValue ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSetItemMaster", itemIdParameter, itemTypeIdParameter, catagoryIdParameter, itemNameParameter, itemCodeParameter, unitOfMeasureIdParameter, manifactureIdParameter, brandIdParameter, modelIdParameter, universalProductCodeParameter, manifacturePartNoParameter, internationalArticleNoParameter, iSBNParameter, barcodeParameter, purchaseRateParameter, purchaseTaxIdParameter, salesRateParameter, salesTaxidParameter, maxStocklvlParameter, minStocklvlParameter, dangerStocklvlParameter, eOQlevelParameter, reorderPointParameter, statusParameter, postedByParameter);
        }
    
        public virtual int PSetSupplier(Nullable<int> sId, string supplierName, string contactName, string panNo, string country, string state, string city, string street, string postalCode, string telNo, string faxNo, string mobileNo, string email, Nullable<int> status, Nullable<short> postedBy)
        {
            var sIdParameter = sId.HasValue ?
                new ObjectParameter("SId", sId) :
                new ObjectParameter("SId", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var panNoParameter = panNo != null ?
                new ObjectParameter("PanNo", panNo) :
                new ObjectParameter("PanNo", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var postedByParameter = postedBy.HasValue ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSetSupplier", sIdParameter, supplierNameParameter, contactNameParameter, panNoParameter, countryParameter, stateParameter, cityParameter, streetParameter, postalCodeParameter, telNoParameter, faxNoParameter, mobileNoParameter, emailParameter, statusParameter, postedByParameter);
        }
    
        public virtual int SqlQueryNotificationStoredProcedure_0619d09a_0bee_4a90_9790_880ab6021c02()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SqlQueryNotificationStoredProcedure_0619d09a_0bee_4a90_9790_880ab6021c02");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetMasterLocation")]
        public virtual IQueryable<FgetMasterLocation_Result> FgetMasterLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetMasterLocation_Result>("[ChaInvBillingEntities].[FgetMasterLocation]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetMenuTemplateInfo")]
        public virtual IQueryable<FgetMenuTemplateInfo_Result> FgetMenuTemplateInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetMenuTemplateInfo_Result>("[ChaInvBillingEntities].[FgetMenuTemplateInfo]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetGetPassPrintreport")]
        public virtual IQueryable<FgetGetPassPrintreport_Result> FgetGetPassPrintreport(Nullable<int> stmid)
        {
            var stmidParameter = stmid.HasValue ?
                new ObjectParameter("Stmid", stmid) :
                new ObjectParameter("Stmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetGetPassPrintreport_Result>("[ChaInvBillingEntities].[FgetGetPassPrintreport](@Stmid)", stmidParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fgetInvBalance")]
        public virtual IQueryable<fgetInvBalance_Result> fgetInvBalance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fgetInvBalance_Result>("[ChaInvBillingEntities].[fgetInvBalance]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetPendinStoreTransfer")]
        public virtual IQueryable<FgetPendinStoreTransfer_Result> FgetPendinStoreTransfer(Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetPendinStoreTransfer_Result>("[ChaInvBillingEntities].[FgetPendinStoreTransfer](@EmployeeId, @LevelId, @TypeId)", employeeIdParameter, levelIdParameter, typeIdParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetStoreTransferItemPening")]
        public virtual IQueryable<FgetStoreTransferItemPening_Result> FgetStoreTransferItemPening(Nullable<int> rMId)
        {
            var rMIdParameter = rMId.HasValue ?
                new ObjectParameter("RMId", rMId) :
                new ObjectParameter("RMId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetStoreTransferItemPening_Result>("[ChaInvBillingEntities].[FgetStoreTransferItemPening](@RMId)", rMIdParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fGetRptRequestedReport")]
        public virtual IQueryable<fGetRptRequestedReport_Result> fGetRptRequestedReport(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId, Nullable<int> pageNumber, Nullable<int> pagesize)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetRptRequestedReport_Result>("[ChaInvBillingEntities].[fGetRptRequestedReport](@Fdate, @Tdate, @EmployeeId, @LevelId, @TypeId, @PageNumber, @Pagesize)", fdateParameter, tdateParameter, employeeIdParameter, levelIdParameter, typeIdParameter, pageNumberParameter, pagesizeParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fGetRptRequestedReportExport")]
        public virtual IQueryable<fGetRptRequestedReportExport_Result> fGetRptRequestedReportExport(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetRptRequestedReportExport_Result>("[ChaInvBillingEntities].[fGetRptRequestedReportExport](@Fdate, @Tdate, @EmployeeId, @LevelId, @TypeId)", fdateParameter, tdateParameter, employeeIdParameter, levelIdParameter, typeIdParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fgetUserDetails")]
        public virtual IQueryable<fgetUserDetails_Result> fgetUserDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fgetUserDetails_Result>("[ChaInvBillingEntities].[fgetUserDetails]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "fGetRptStoreTransferReport")]
        public virtual IQueryable<fGetRptStoreTransferReport_Result> fGetRptStoreTransferReport(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId, Nullable<int> pageNumber, Nullable<int> pagesize)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetRptStoreTransferReport_Result>("[ChaInvBillingEntities].[fGetRptStoreTransferReport](@Fdate, @Tdate, @EmployeeId, @LevelId, @TypeId, @PageNumber, @Pagesize)", fdateParameter, tdateParameter, employeeIdParameter, levelIdParameter, typeIdParameter, pageNumberParameter, pagesizeParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fGetRptStoreTransferReportExport")]
        public virtual IQueryable<fGetRptStoreTransferReportExport_Result> fGetRptStoreTransferReportExport(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetRptStoreTransferReportExport_Result>("[ChaInvBillingEntities].[fGetRptStoreTransferReportExport](@Fdate, @Tdate, @EmployeeId, @LevelId, @TypeId)", fdateParameter, tdateParameter, employeeIdParameter, levelIdParameter, typeIdParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fgetPurchaseList")]
        public virtual IQueryable<fgetPurchaseList_Result> fgetPurchaseList(Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId, Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> pageNumber, Nullable<int> pagesize)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fgetPurchaseList_Result>("[ChaInvBillingEntities].[fgetPurchaseList](@EmployeeId, @LevelId, @TypeId, @Fdate, @Tdate, @PageNumber, @Pagesize)", employeeIdParameter, levelIdParameter, typeIdParameter, fdateParameter, tdateParameter, pageNumberParameter, pagesizeParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fgetPurchaseListExport")]
        public virtual IQueryable<fgetPurchaseListExport_Result> fgetPurchaseListExport(Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId, Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fgetPurchaseListExport_Result>("[ChaInvBillingEntities].[fgetPurchaseListExport](@EmployeeId, @LevelId, @TypeId, @Fdate, @Tdate)", employeeIdParameter, levelIdParameter, typeIdParameter, fdateParameter, tdateParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetPurchaseSerialNolist")]
        public virtual IQueryable<FgetPurchaseSerialNolist_Result> FgetPurchaseSerialNolist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetPurchaseSerialNolist_Result>("[ChaInvBillingEntities].[FgetPurchaseSerialNolist]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetCpmpanyInfo")]
        public virtual IQueryable<FgetCpmpanyInfo_Result> FgetCpmpanyInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetCpmpanyInfo_Result>("[ChaInvBillingEntities].[FgetCpmpanyInfo]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FGetNepaliMonthList")]
        public virtual IQueryable<FGetNepaliMonthList_Result> FGetNepaliMonthList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FGetNepaliMonthList_Result>("[ChaInvBillingEntities].[FGetNepaliMonthList]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "PurchaseSale")]
        public virtual IQueryable<PurchaseSale_Result> PurchaseSale(Nullable<int> year, Nullable<int> month, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PurchaseSale_Result>("[ChaInvBillingEntities].[PurchaseSale](@Year, @Month, @PageNumber, @PageSize)", yearParameter, monthParameter, pageNumberParameter, pageSizeParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "PurchaseSaleExport")]
        public virtual IQueryable<PurchaseSaleExport_Result> PurchaseSaleExport(Nullable<int> year, Nullable<int> month)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PurchaseSaleExport_Result>("[ChaInvBillingEntities].[PurchaseSaleExport](@Year, @Month)", yearParameter, monthParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetConsumptionTransferPendinglist")]
        public virtual IQueryable<FgetConsumptionTransferPendinglist_Result> FgetConsumptionTransferPendinglist(Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId, Nullable<int> pageNumber, Nullable<int> pagesize, string search)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetConsumptionTransferPendinglist_Result>("[ChaInvBillingEntities].[FgetConsumptionTransferPendinglist](@EmployeeId, @LevelId, @TypeId, @PageNumber, @Pagesize, @Search)", employeeIdParameter, levelIdParameter, typeIdParameter, pageNumberParameter, pagesizeParameter, searchParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetConsumptionTransferPendinglistViewDetails")]
        public virtual IQueryable<FgetConsumptionTransferPendinglistViewDetails_Result> FgetConsumptionTransferPendinglistViewDetails(Nullable<int> stmid)
        {
            var stmidParameter = stmid.HasValue ?
                new ObjectParameter("Stmid", stmid) :
                new ObjectParameter("Stmid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetConsumptionTransferPendinglistViewDetails_Result>("[ChaInvBillingEntities].[FgetConsumptionTransferPendinglistViewDetails](@Stmid)", stmidParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fGetRptConsumptionRemReport")]
        public virtual IQueryable<fGetRptConsumptionRemReport_Result> fGetRptConsumptionRemReport(Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId, Nullable<int> pageNumber, Nullable<int> pagesize)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetRptConsumptionRemReport_Result>("[ChaInvBillingEntities].[fGetRptConsumptionRemReport](@EmployeeId, @LevelId, @TypeId, @PageNumber, @Pagesize)", employeeIdParameter, levelIdParameter, typeIdParameter, pageNumberParameter, pagesizeParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fGetRptConsumptionRemReportExport")]
        public virtual IQueryable<fGetRptConsumptionRemReportExport_Result> fGetRptConsumptionRemReportExport(Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetRptConsumptionRemReportExport_Result>("[ChaInvBillingEntities].[fGetRptConsumptionRemReportExport](@EmployeeId, @LevelId, @TypeId)", employeeIdParameter, levelIdParameter, typeIdParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fGetRptConsumptionTransferReport")]
        public virtual IQueryable<fGetRptConsumptionTransferReport_Result> fGetRptConsumptionTransferReport(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId, Nullable<int> pageNumber, Nullable<int> pagesize)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetRptConsumptionTransferReport_Result>("[ChaInvBillingEntities].[fGetRptConsumptionTransferReport](@Fdate, @Tdate, @EmployeeId, @LevelId, @TypeId, @PageNumber, @Pagesize)", fdateParameter, tdateParameter, employeeIdParameter, levelIdParameter, typeIdParameter, pageNumberParameter, pagesizeParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fGetRptConsumptionTransferReportExport")]
        public virtual IQueryable<fGetRptConsumptionTransferReportExport_Result> fGetRptConsumptionTransferReportExport(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetRptConsumptionTransferReportExport_Result>("[ChaInvBillingEntities].[fGetRptConsumptionTransferReportExport](@Fdate, @Tdate, @EmployeeId, @LevelId, @TypeId)", fdateParameter, tdateParameter, employeeIdParameter, levelIdParameter, typeIdParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetItemreturnDetailsTB")]
        public virtual IQueryable<FgetItemreturnDetailsTB_Result> FgetItemreturnDetailsTB(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetItemreturnDetailsTB_Result>("[ChaInvBillingEntities].[FgetItemreturnDetailsTB](@Fdate, @Tdate, @PageNumber, @PageSize)", fdateParameter, tdateParameter, pageNumberParameter, pageSizeParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetItemreturnDetailsTBExport")]
        public virtual IQueryable<FgetItemreturnDetailsTBExport_Result> FgetItemreturnDetailsTBExport(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetItemreturnDetailsTBExport_Result>("[ChaInvBillingEntities].[FgetItemreturnDetailsTBExport](@Fdate, @Tdate)", fdateParameter, tdateParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetInventoryStatement")]
        public virtual IQueryable<FgetInventoryStatement_Result> FgetInventoryStatement(Nullable<int> itemId, Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("Tdate", tdate) :
                new ObjectParameter("Tdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetInventoryStatement_Result>("[ChaInvBillingEntities].[FgetInventoryStatement](@ItemId, @Fdate, @Tdate)", itemIdParameter, fdateParameter, tdateParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "fgetInvSummary")]
        public virtual IQueryable<fgetInvSummary_Result> fgetInvSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fgetInvSummary_Result>("[ChaInvBillingEntities].[fgetInvSummary]()");
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetReturnMainPendingForAppoval")]
        public virtual IQueryable<FgetReturnMainPendingForAppoval_Result> FgetReturnMainPendingForAppoval(Nullable<int> employeeId, Nullable<int> levelId, Nullable<int> typeId, Nullable<int> pageNumber, Nullable<int> pagesize, string search)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetReturnMainPendingForAppoval_Result>("[ChaInvBillingEntities].[FgetReturnMainPendingForAppoval](@EmployeeId, @LevelId, @TypeId, @PageNumber, @Pagesize, @Search)", employeeIdParameter, levelIdParameter, typeIdParameter, pageNumberParameter, pagesizeParameter, searchParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetReturnMainPendingForAppovalItemList")]
        public virtual IQueryable<FgetReturnMainPendingForAppovalItemList_Result> FgetReturnMainPendingForAppovalItemList(Nullable<int> rid)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("Rid", rid) :
                new ObjectParameter("Rid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetReturnMainPendingForAppovalItemList_Result>("[ChaInvBillingEntities].[FgetReturnMainPendingForAppovalItemList](@Rid)", ridParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetReturnMainPendingForAppovalItemListwithSerialMac")]
        public virtual IQueryable<FgetReturnMainPendingForAppovalItemListwithSerialMac_Result> FgetReturnMainPendingForAppovalItemListwithSerialMac(Nullable<int> rDid)
        {
            var rDidParameter = rDid.HasValue ?
                new ObjectParameter("RDid", rDid) :
                new ObjectParameter("RDid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetReturnMainPendingForAppovalItemListwithSerialMac_Result>("[ChaInvBillingEntities].[FgetReturnMainPendingForAppovalItemListwithSerialMac](@RDid)", rDidParameter);
        }
    
        [DbFunction("ChaInvBillingEntities", "FgetStoreTransferItemPendingDetails")]
        public virtual IQueryable<FgetStoreTransferItemPendingDetails_Result> FgetStoreTransferItemPendingDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FgetStoreTransferItemPendingDetails_Result>("[ChaInvBillingEntities].[FgetStoreTransferItemPendingDetails]()");
        }
    }
}
